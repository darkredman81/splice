import tkinter as tk
from tkinter import ttk, scrolledtext, font
import xml.etree.ElementTree as ET
import socket
import threading
import time
import logging
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime
import re
import http.client
import json
import urllib.parse

def setup_logging():
    log_formatter = logging.Formatter('%(asctime)s - %(message)s')
    log_handler = TimedRotatingFileHandler(
        filename='socket_monitor.log',
        when='midnight',
        interval=1,
        backupCount=7,
        encoding='utf-8'
    )
    log_handler.setFormatter(log_formatter)
    log_handler.suffix = "%Y%m%d"

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(log_handler)

def read_config(file_path):
    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        Scanner = int(root.find('connection/Scanner').text)
        MES = root.find('connection/MES').text
        MES_port = int(root.find('connection/MES_port').text)
        API_URL = root.find('connection/API_URL').text
        MTS = root.find('connection/MTS').text
        MTS_Port = int(root.find('connection/MTS_Port').text)

        return Scanner, MES, MES_port, API_URL, MTS, MTS_Port
    except FileNotFoundError:
        logging.error(f"Configuration file not found: {file_path}")
        raise
    except ET.ParseError:
        logging.error("Error parsing the XML configuration file.")
        raise
    except (ValueError, AttributeError) as e:
        logging.error(f"Error reading configuration values: {e}")
        raise

setup_logging()

config_file = 'configs.xml'
Scanner, MES, MES_port, API_URL, MTS, MTS_Port = read_config(config_file)

def test_port_availability(port):
    try:
        test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        test_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        test_socket.bind(('', port))
        test_socket.close()
        return True
    except OSError:
        return False

class SocketMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("SPLICE MONITOR")
        self.root.geometry("300x300")
        self.root.resizable(False, False)

        self.status_frame = ttk.LabelFrame(root, text="Status")
        self.status_frame.pack(padx=2, pady=1, fill="x")
        self.root.attributes('-topmost', True)

        status_frame_inner = ttk.Frame(self.status_frame)
        status_frame_inner.pack(fill="x", padx=2)

        self.Scanner_Status = ttk.Label(status_frame_inner, text="Scanner: ❌", foreground="red")
        self.Scanner_Status.pack(side="left", padx=2)

        self.FVS_Status = ttk.Label(status_frame_inner, text="FVS: ❌", foreground="red")
        self.FVS_Status.pack(side="left", padx=2)

        custom_font = font.Font(size=36, weight='bold')
        self.unit_label = tk.Label(root, text="SPLICE", background="red", foreground="white", font=custom_font, width=10, height=2, relief="raised", borderwidth=0)
        self.unit_label.pack(pady=1, fill="x", expand=True)

        self.log_frame = ttk.LabelFrame(root, text="Log")
        self.log_frame.pack(padx=2, pady=1, fill="both", expand=True)

        self.log_text = scrolledtext.ScrolledText(self.log_frame, height=3)
        self.log_text.pack(padx=1, pady=1, fill="both", expand=True)

        self.server_40000 = None
        self.FVS_client = None
        self.scanner_connected = False
        self.running = True
        self.active_client_socket = None

        self.start_server()

        self.root.update()
        self.unit_label.configure(wraplength=200)

    def handle_client(self, client_socket, addr):
        current_serial = None
        self.active_client_socket = client_socket
        self.scanner_connected = True
        self.root.after(0, lambda: self.Scanner_Status.configure(text="Scanner: ✓", foreground="green"))
        self.log_message(f"Scanner connected from {addr}")
        
        # Now that scanner is connected, establish FVS connection
        fvs_thread = threading.Thread(target=self.connect_to_7575, daemon=True)
        fvs_thread.start()
        
        # Send an initial newline character after connection
        self.log_message("Sending initial newline to scanner")
        client_socket.send( b"\r\n\r\n")
        

        try:
            while self.running and self.scanner_connected:
                try:
                    data = client_socket.recv(1024)
                    if not data:
                        self.log_message("Scanner disconnected")
                        self.scanner_connected = False
                        break

                    try:
                        decoded_data = data.decode('utf-8', errors='ignore')
                        cleaned_data = re.sub(r'[^\x20-\x7E]+', '', decoded_data).replace(" ", "")

                        self.log_message(f"Scanner > {cleaned_data[:20]}...")
                        serial = re.search(r'SU.{9}', cleaned_data)
                        if serial and serial.group() != current_serial:
                            current_serial = serial.group()
                            self.log_message(f"New serial detected: {current_serial}")

                        if self.FVS_client:
                            # Forward data to FVS
                            try:
                                self.log_message(f"Forwarding to FVS: {len(data)} bytes")
                                self.FVS_client.send(data + b"\r\n")
                                
                                # Set a timeout for receiving response
                                self.FVS_client.settimeout(15)
                                self.log_message("Waiting for FVS response...")
                                response = self.FVS_client.recv(1024)
                                
                                if response:
                                    decoded_response = response.decode('utf-8', errors='ignore')
                                    cleaned_response = re.sub(r'[^\x20-\x7E]+', '', decoded_response).replace(" ", "")
                                    self.log_message(f"FVS > {cleaned_response[:20]}...")

                                    # Always send the response back to the scanner
                                    self.log_message(f"Sending response back to scanner: {len(response)} bytes")
                                    # Add newline at the end of the response
                                    if not response.endswith(b"\r\n"):
                                        response = response + b"\r\n"
                                    client_socket.send(response)
                                    
                                    # Check for OK pattern
                                    match = re.search(r'\[\s*O\s*k\s*\]', cleaned_response)
                                    if match and current_serial is not None:
                                        self.log_message("✓ PASS")

                                        uk2_value = get_uk2_from_mts(current_serial)
                                        self.log_message(f"uk2 from MTS: {uk2_value}")
                                        current_serial = uk2_value

                                        self.log_message(f"OK&{current_serial}&{current_serial}&END\r\n")
                                        self.blink_unit_label()
                                        send_post_request(current_serial)
                                else:
                                    self.log_message("Empty response from FVS")
                                    # Reconnect to FVS on empty response
                                    self.reconnect_fvs()
                                
                            except socket.timeout:
                                self.log_message("FVS response timed out")
                                self.reconnect_fvs()
                            except ConnectionResetError:
                                self.log_message("FVS connection was reset")
                                self.reconnect_fvs()
                            except BrokenPipeError:
                                self.log_message("FVS connection pipe broken")
                                self.reconnect_fvs()
                        else:
                            self.log_message("FVS client not connected, cannot forward data")
                    except UnicodeDecodeError:
                        self.log_message("Decode error with received data")
                except socket.timeout:
                    continue
            
        except Exception as e:
            self.log_message(f"Error in handle_client: {str(e)}")
        finally:
            self.active_client_socket = None
            self.scanner_connected = False
            client_socket.close()
            self.root.after(0, lambda: self.Scanner_Status.configure(text="Scanner: ❌", foreground="red"))
            
            # Disconnect FVS when scanner disconnects
            self.disconnect_fvs()

    def reconnect_fvs(self):
        self.disconnect_fvs()
        if self.scanner_connected:
            threading.Thread(target=self.connect_to_7575, daemon=True).start()

    def disconnect_fvs(self):
        if self.FVS_client:
            try:
                self.FVS_client.close()
            except:
                pass
            self.FVS_client = None
            self.root.after(0, lambda: self.FVS_Status.configure(text="FVS: ❌", foreground="red"))

    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert("end", f"{timestamp} | {message}\n")
        self.log_text.see("end")
        logging.info(message)

    def blink_unit_label(self):
        def blink():
            start_time = time.time()
            while time.time() - start_time < 5:
                self.root.after(0, lambda: self.unit_label.configure(text="PASS", background="green"))
                time.sleep(0.5)
                self.root.after(0, lambda: self.unit_label.configure(text="SPLICE", background="red"))
                time.sleep(0.5)
            self.root.after(0, lambda: self.unit_label.configure(background="red"))

        threading.Thread(target=blink, daemon=True).start()

    def start_server(self):
        threading.Thread(target=self.listen_on_40000, daemon=True).start()

    def listen_on_40000(self):
        try:
            self.server_40000 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_40000.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            
            try:
                self.server_40000.bind(('', Scanner))
            except OSError as e:
                self.log_message(f"Error binding to port {Scanner}: {e}")
                if e.errno == 98:  # Address already in use
                    self.log_message("Port is already in use. Try restarting the application or check for other processes using this port.")
                return
            
            self.server_40000.listen(5)
            self.log_message(f"Successfully listening on port {Scanner}")

            while self.running:
                try:
                    self.log_message(f"Waiting for scanner connection on port {Scanner}...")
                    client_socket, addr = self.server_40000.accept()
                    self.log_message(f"New scanner connection from {addr}")
                    
                    # Handle only one client at a time
                    if self.scanner_connected:
                        self.log_message("Another scanner is already connected. Rejecting this connection.")
                        client_socket.close()
                    else:
                        threading.Thread(target=self.handle_client, args=(client_socket, addr), daemon=True).start()
                        
                except OSError as e:
                    if not self.running:
                        break
                    self.log_message(f"Socket error: {e}")
                    time.sleep(1)
                except Exception as e:
                    self.log_message(f"Unexpected error in listen_on_40000: {e}")
                    time.sleep(1)
        except Exception as e:
            self.log_message(f"Failed to set up server on port {Scanner}: {e}")

    def connect_to_7575(self):
        if not self.scanner_connected:
            self.log_message("Not connecting to FVS because scanner is not connected")
            return
            
        self.log_message(f"Attempting to connect to FVS at {MES}:{MES_port}...")
        try:
            self.FVS_client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.FVS_client.settimeout(10)
            self.FVS_client.connect((MES, MES_port))
            
            self.root.after(0, lambda: self.FVS_Status.configure(text="FVS: ✓", foreground="green"))
            self.log_message(f"Successfully connected to FVS at {MES}:{MES_port}")
            
        except ConnectionRefusedError:
            self.root.after(0, lambda: self.FVS_Status.configure(text="FVS: ❌", foreground="red"))
            self.log_message(f"Connection refused by FVS server at {MES}:{MES_port}. Is the server running?")
            self.FVS_client = None
        except socket.timeout:
            self.root.after(0, lambda: self.FVS_Status.configure(text="FVS: ❌", foreground="red"))
            self.log_message(f"Connection to FVS timed out. Check network or server status.")
            self.FVS_client = None
        except Exception as e:
            self.root.after(0, lambda: self.FVS_Status.configure(text="FVS: ❌", foreground="red"))
            self.log_message(f"FVS connection error: {str(e)}")
            self.FVS_client = None

    def cleanup(self):
        self.running = False
        self.scanner_connected = False
        
        if self.active_client_socket:
            try:
                self.active_client_socket.close()
            except:
                pass
                
        if self.FVS_client:
            try:
                self.FVS_client.close()
            except:
                pass
                
        if self.server_40000:
            try:
                self.server_40000.close()
            except:
                pass

def send_post_request(serial):
    try:
        parsed_url = urllib.parse.urlparse(API_URL)
        conn_cls = http.client.HTTPSConnection if parsed_url.scheme == 'https' else http.client.HTTPConnection
        conn = conn_cls(parsed_url.netloc, parsed_url.port or (443 if parsed_url.scheme == 'https' else 80))

        headers = {'Content-Type': 'application/json'}
        payload = json.dumps({"PartNumber": serial})

        conn.request("POST", parsed_url.path or "/", body=payload, headers=headers)
        response = conn.getresponse()
        logging.info(f"POST Response: {response.status} - {response.read().decode()}")
        conn.close()
    except Exception as e:
        logging.error(f"Failed to send POST request: {e}")

def get_uk2_from_mts(serial):
    try:
        msgts = datetime.now().strftime("%H%M%S")
        msg = f'BREQ|id={serial}|process=FVS|station=SMT80|fvssource="MTS:{MTS_Port}"|msgts={msgts}|uk2=?\n'
        with socket.create_connection((MTS, MTS_Port), timeout=5) as mts_sock:
            mts_sock.sendall(msg.encode('utf-8'))
            response = mts_sock.recv(1024).decode('utf-8', errors='ignore')
            logging.info(f"MTS Response: {response}")
            match = re.search(r'uk2=([^\|\n\r]+)', response)
            if match:
                return match.group(1)
    except Exception as e:
        logging.error(f"Failed to query MTS: {e}")
    return serial  # fallback if uk2 not found

if __name__ == "__main__":
    # Check port availability before starting
    if not test_port_availability(Scanner):
        logging.error(f"Port {Scanner} is not available. Please check if another application is using it.")
        print(f"ERROR: Port {Scanner} is not available. Please check if another application is using it.")
    else:
        root = tk.Tk()
        app = SocketMonitorApp(root)
        root.protocol("WM_DELETE_WINDOW", lambda: (app.cleanup(), root.destroy()))
        root.mainloop()
